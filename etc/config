OutputGenerationFile = /dev/shm/generation.csv
OutputSolutionFile = /dev/shm/solution.csv 


//ProblemFileConfig = etc/bag.conf
ProblemFileConfig = etc/function.conf

NumberIsles = 10 

# Number of individuals for a population into a island
NumberIndividuals = 1000

# Number of genes for each individual
NumberGenes = 80

# Number of generations
NumberGenerations = 1000000

# Number of generations before the migration process start
MigrationEveryGenerations = 10000

# Migration type
# 1: Select NumberMigrants randomly
# 2: select the NumberMigrants worsts individuals
MigrationType = 1

# Number of migrants 
NumberMigrants = 5

# Save the statictis for each generation
SaveDetail = 1

# Type of parent selection (method of constructing the mating pool):
#  0: basic seleccion (two parents randomly 
# 1: Fitness-proportional selection
# 2: Stochastic universal sampling
# 3: Ranking selection (linear)
# 4: Tournament selection
ParentSelectionType = 4

NumParents = 2

# Expected number of offspring alloted to the fittest individual (just in case of linear ranking selection). Range: [1,2]
ExpectedOffspringNumberForFittestIndividual = 2

# Tournament size (just in case of tournament selection). Range: [2,IndividualsNumber].
TournamentSize = 5

# Type of crossover:
# 1: One-point crossover
# 3: N-point crossover
# 4: Parameterized uniform crossover
CrossoverType = 1

# Number of crossover points (just in case of N-point crossover). Range: [1,GenesNumber-1]
CrossoverPointsNumber = 3

# Exchange probability (just in case of Parameterized Uniform Crossover)
ExchangeProbability = 0.5

# Mutation rate
MutationRate = 0.07

# Type of survivor selection:
# 1: Generational model
# 2: Steady state model
SurvivorSelectionType = 2


# Generational gap (just in case of steady state model for survivor selection). Range: [1, IndividualsNumber].
GenerationalGap = 29
